---
title: "Thesis Data Analysis"
format: html
editor: visual
---

## Quarto

#### **Install Packages**

```{r}
#Install an R package to import data from Excel files
install.packages("readxl")
library(readxl)
#Install data wrangeling and visualisation tools
install.packages("tidyverse")
install.packages(knitr)
library(tidyverse)
library(knitr)
library(viridis)
library(Hmisc)
library(ggpubr)
library(dplyr)
library(ggplot2)
library(readxl)
library(vegan)
library(car)
library(emmeans)
library(pracma)
library(rlang)
library(ggbreak)
library(patchwork)
library(grid)
library(segmented)
library(svglite)
```

#### **Upload data**

```{r}
dataset1 <- read_excel("dataset1.xlsx")

# Convert NA in TypeofCC to a factor level "Unknown"
dataset1$TypeofCC <- as.character(dataset1$TypeofCC)
dataset1$TypeofCC[is.na(dataset1$TypeofCC)] <- "Unknown"
dataset1$TypeofCC <- factor(dataset1$TypeofCC)
dataset1$TypeofCC <- as.factor(dataset1$TypeofCC)
#make uknown reference level
dataset1$TypeofCC <- relevel(dataset1$TypeofCC, ref = "Unknown")

```

### Boxplots

```{r}
#first make sure age class is in right order
dataset1$`AgeClass` <- factor(dataset1$`AgeClass`, levels = c("0-5", "6-15", "16-30", "31-100", "136+"))
#then create boxplots
plotbp <- ggplot(data = dataset1, 
       mapping = aes(x = `AgeClass`, 
                     y = `CarbonStock`, fill=AgeClass))+
  scale_fill_manual(values=c("darkolivegreen1", "olivedrab3", "olivedrab", "darkolivegreen", "cornflowerblue"))+
  geom_boxplot(width=0.5)+
  geom_jitter(width=0.1, 
              height=0, 
              shape=1)+
  scale_x_discrete(
    breaks = c("0-5", "6-15", "16-30", "31-100", "136+"),
    labels = c("0-5", "6-15", "16-30", "31-100", "136+
(old-growth)")
  )+
   theme_classic() +
  guides(fill=FALSE)+
  labs(x = "Age Class", y = "Carbon Stock (Mg C/ha)")+
  
   theme(axis.title = element_text(size = 12), # Increase axis title font size
    axis.text = element_text(size = 10))  # Increase axis text font size
#make pretty

print(plotbp)

ggsave("boxplot.svg", plot = plotbp, width = 7.5, height = 5)


shell.exec("boxplot.svg")



```

#### Test significance

```{r}
#Does Age have an influence on Stock?

model <- lm(CarbonStock ~ Age, data = dataset1)
summary(model)



```

```{r}
#Does Management have an influence on Stock?
modeltest <- lm(CarbonStock ~ Managed, data = dataset1)
summary(modeltest)
```

### **Flux over time**

```{r}
  plotflux <- ggplot(data = dataset1, 
       mapping = aes(x = Age,
             y = CarbonFlux))+
  geom_smooth(method=NULL, #in this cas NULL chooses loess and formula y-x
              fill = "lightgrey")+
  geom_point(shape = 16,
             size = 3)+
  theme_bw()
  
  plotflux
  

```

### cum carbon flux

```{r}
dataset1a <- read_excel("dataset1a.xlsx")

ggplot(data = dataset1a, 
       mapping = aes(x = Age,
             y = cumcarbonflux))+
  geom_smooth(method=NULL, #in this cas NULL chooses loess and formula y-x
              fill = "lightgrey")+
  geom_point(shape = 16,
             size = 3)+
  scale_x_continuous(
  limits = c(0, 50),  # Add slight buffer
  breaks = seq(0, 50, by = 10))+
  theme_bw()

```

#### x-intercept

```{r}


# Load your dataset
dataset1a <- read_excel("dataset1a.xlsx")

# Generate smoother data (loess fit)
smoothed_data <- ggplot_build(
  ggplot(data = dataset1a, aes(x = Age, y = cumcarbonflux)) +
    geom_smooth(method = NULL)  # loess by default
)$data[[1]]

# View structure of the smooth data (optional)
# head(smoothed_data)

# Interpolate to find where the smooth line crosses y = 0
zero_crossing <- smoothed_data %>%
  mutate(sign = sign(y)) %>%
  mutate(sign_change = sign != lag(sign)) %>%
  filter(sign_change == TRUE)

# Interpolate between points around y = 0
estimate_zero_crossings <- function(df) {
  crossings <- list()
  for (i in 1:(nrow(df)-1)) {
    y1 <- df$y[i]
    y2 <- df$y[i+1]
    if (y1 * y2 < 0) {  # opposite signs
      x1 <- df$x[i]
      x2 <- df$x[i+1]
      x0 <- x1 - y1 * (x2 - x1) / (y2 - y1)  # linear interpolation
      crossings[[length(crossings)+1]] <- x0
    }
  }
  return(unlist(crossings))
}

x_crossings <- estimate_zero_crossings(smoothed_data)

# Output the result
x_crossings

```

### Integrate Flux Data!

0-275, whole graph integration:

```{r}
# Build the ggplot object to access the smoothed data
plotflux1 <- ggplot_build(plotflux)


# Extract the smoothed data
smoothed_data <- plotflux1$data[[2]]  # The second layer corresponds to geom_smooth

#clean data and remove NAs

cleaned_data <- smoothed_data[!is.na(smoothed_data$y), ]


# Perform numerical integration
area_under_curve <- trapz(cleaned_data$x, cleaned_data$y)
print(area_under_curve)

# Output the result
print(area_under_curve)


```

0-0,6

```{r}
# Define age range for integration
min_age <- 0
max_age0.6 <- 0.6

# Subset cleaned_data to just those ages
subset_data0.6 <- cleaned_data[cleaned_data$x >= min_age & cleaned_data$x <= max_age0.6, ]

# Integrate
area_subset0.6 <- trapz(subset_data0.6$x, subset_data0.6$y)

# Print result
print(area_subset0.6)
```

0-1

```{r}
# Define age range for integration
min_age <- 0
max_age1 <- 1

# Subset cleaned_data to just those ages
subset_data1 <- cleaned_data[cleaned_data$x >= min_age & cleaned_data$x <= max_age1, ]

# Integrate
area_subset1 <- trapz(subset_data1$x, subset_data1$y)

# Print result
print(area_subset1)
```

0-2

```{r}
# Define age range for integration
min_age <- 0
max_age2 <- 2

# Subset cleaned_data to just those ages
subset_data2 <- cleaned_data[cleaned_data$x >= min_age & cleaned_data$x <= max_age2, ]

# Integrate
area_subset2 <- trapz(subset_data2$x, subset_data2$y)

# Print result
print(area_subset2)
```

0-3

```{r}
# Define age range for integration
min_age <- 0
max_age3 <- 3

# Subset cleaned_data to just those ages
subset_data3 <- cleaned_data[cleaned_data$x >= min_age & cleaned_data$x <= max_age3, ]

# Integrate
area_subset3 <- trapz(subset_data3$x, subset_data3$y)

# Print result
print(area_subset3)
```

0-4

```{r}
# Define age range for integration
min_age <- 0
max_age4 <- 4

# Subset cleaned_data to just those ages
subset_data4 <- cleaned_data[cleaned_data$x >= min_age & cleaned_data$x <= max_age4, ]

# Integrate
area_subset4 <- trapz(subset_data4$x, subset_data4$y)

# Print result
print(area_subset4)
```

0-5

```{r}
# Define age range for integration
min_age <- 0
max_age5 <- 5

# Subset cleaned_data to just those ages
subset_data5 <- cleaned_data[cleaned_data$x >= min_age & cleaned_data$x <= max_age5, ]

# Integrate
area_subset5 <- trapz(subset_data5$x, subset_data5$y)

# Print result
print(area_subset5)
```

0-7

```{r}
# Define age range for integration
min_age <- 0
max_age7 <- 7

# Subset cleaned_data to just those ages
subset_data7 <- cleaned_data[cleaned_data$x >= min_age & cleaned_data$x <= max_age7, ]

# Integrate
area_subset7 <- trapz(subset_data7$x, subset_data7$y)

# Print result
print(area_subset7)
```

0-8

```{r}
# Define age range for integration
min_age <- 0
max_age8 <- 8

# Subset cleaned_data to just those ages
subset_data8 <- cleaned_data[cleaned_data$x >= min_age & cleaned_data$x <= max_age8, ]

# Integrate
area_subset8 <- trapz(subset_data8$x, subset_data8$y)

# Print result
print(area_subset8)
```

0-9

```{r}
# Define age range for integration
min_age <- 0
max_age9 <- 9

# Subset cleaned_data to just those ages
subset_data9 <- cleaned_data[cleaned_data$x >= min_age & cleaned_data$x <= max_age9, ]

# Integrate
area_subset9 <- trapz(subset_data9$x, subset_data9$y)

# Print result
print(area_subset9)
```

0-10

```{r}
# Define age range for integration
min_age <- 0
max_age10 <- 10

# Subset cleaned_data to just those ages
subset_data10 <- cleaned_data[cleaned_data$x >= min_age & cleaned_data$x <= max_age10, ]

# Integrate
area_subset10 <- trapz(subset_data10$x, subset_data10$y)

# Print result
print(area_subset10)
```

0-14

```{r}
# Define age range for integration
min_age <- 0
max_age14 <- 14

# Subset cleaned_data to just those ages
subset_data14 <- cleaned_data[cleaned_data$x >= min_age & cleaned_data$x <= max_age14, ]

# Integrate
area_subset14 <- trapz(subset_data14$x, subset_data14$y)

# Print result
print(area_subset14)
```

0-15

```{r}
# Define age range for integration
min_age <- 0
max_age15 <- 15

# Subset cleaned_data to just those ages
subset_data15 <- cleaned_data[cleaned_data$x >= min_age & cleaned_data$x <= max_age15, ]

# Integrate
area_subset15 <- trapz(subset_data15$x, subset_data15$y)

# Print result
print(area_subset15)

```

0-16

```{r}
# Define age range for integration
min_age <- 0
max_age16 <- 16

# Subset cleaned_data to just those ages
subset_data16 <- cleaned_data[cleaned_data$x >= min_age & cleaned_data$x <= max_age16, ]

# Integrate
area_subset16 <- trapz(subset_data16$x, subset_data16$y)

# Print result
print(area_subset16)
```

0-24

```{r}
# Define age range for integration
min_age <- 0
max_age24 <- 24

# Subset cleaned_data to just those ages
subset_data24 <- cleaned_data[cleaned_data$x >= min_age & cleaned_data$x <= max_age24, ]

# Integrate
area_subset24 <- trapz(subset_data24$x, subset_data24$y)

# Print result
print(area_subset24)


```

0-29

```{r}
# Define age range for integration
min_age <- 0
max_age29 <- 29

# Subset cleaned_data to just those ages
subset_data29 <- cleaned_data[cleaned_data$x >= min_age & cleaned_data$x <= max_age29, ]

# Integrate
area_subset29 <- trapz(subset_data29$x, subset_data29$y)

# Print result
print(area_subset29)

```

0-35

```{r}
# Define age range for integration
min_age <- 0
max_age35 <- 35

# Subset cleaned_data to just those ages
subset_data35 <- cleaned_data[cleaned_data$x >= min_age & cleaned_data$x <= max_age35, ]

# Integrate
area_subset35 <- trapz(subset_data35$x, subset_data35$y)

# Print result
print(area_subset35)
```

0-40

```{r}
# Define age range for integration
min_age <- 0
max_age40 <-40

# Subset cleaned_data to just those ages
subset_data40 <- cleaned_data[cleaned_data$x >= min_age & cleaned_data$x <= max_age40, ]

# Integrate
area_subset40 <- trapz(subset_data40$x, subset_data40$y)

# Print result
print(area_subset40)
```

0-44.25

```{r}
# Define age range for integration
min_age <- 0
max_age44.25 <-44.25

# Subset cleaned_data to just those ages
subset_data44.25 <- cleaned_data[cleaned_data$x >= min_age & cleaned_data$x <= max_age44.25, ]

# Integrate
area_subset44.25 <- trapz(subset_data44.25$x, subset_data44.25$y)

# Print result
print(area_subset44.25)
```

0-44.5

```{r}
# Define age range for integration
min_age <- 0
max_age44.50 <-44.50

# Subset cleaned_data to just those ages
subset_data44.50 <- cleaned_data[cleaned_data$x >= min_age & cleaned_data$x <= max_age44.50, ]

# Integrate
area_subset44.50 <- trapz(subset_data44.50$x, subset_data44.50$y)

# Print result
print(area_subset44.50)
```

0-45

```{r}
# Define age range for integration
min_age <- 0
max_age45 <-45

# Subset cleaned_data to just those ages
subset_data45 <- cleaned_data[cleaned_data$x >= min_age & cleaned_data$x <= max_age45, ]

# Integrate
area_subset45 <- trapz(subset_data45$x, subset_data45$y)

# Print result
print(area_subset45)
```

0-50

```{r}
# Define age range for integration
min_age <- 0
max_age50 <- 50

# Subset cleaned_data to just those ages
subset_data50 <- cleaned_data[cleaned_data$x >= min_age & cleaned_data$x <= max_age50, ]

# Integrate
area_subset50 <- trapz(subset_data50$x, subset_data50$y)

# Print result
print(area_subset50)

```

0-50.5

```{r}
# Define age range for integration
min_age <- 0
max_age50.5 <- 50.5

# Subset cleaned_data to just those ages
subset_data50.5 <- cleaned_data[cleaned_data$x >= min_age & cleaned_data$x <= max_age50.5, ]

# Integrate
area_subset50.5 <- trapz(subset_data50.5$x, subset_data50.5$y)

# Print result
print(area_subset50.5)

```

0-60

```{r}
# Define age range for integration
min_age <- 0
max_age60 <- 60

# Subset cleaned_data to just those ages
subset_data60 <- cleaned_data[cleaned_data$x >= min_age & cleaned_data$x <= max_age60, ]

# Integrate
area_subset60 <- trapz(subset_data60$x, subset_data60$y)

# Print result
print(area_subset60)
```

0-73,75

```{r}
# Define age range for integration
min_age <- 0
max_age73.75 <- 73.75

# Subset cleaned_data to just those ages
subset_data73.75 <- cleaned_data[cleaned_data$x >= min_age & cleaned_data$x <= max_age73.75, ]

# Integrate
area_subset73.75 <- trapz(subset_data73.75$x, subset_data73.75$y)

# Print result
print(area_subset73.75)
```

0-75

```{r}
# Define age range for integration
min_age <- 0
max_age75 <- 75

# Subset cleaned_data to just those ages
subset_data75 <- cleaned_data[cleaned_data$x >= min_age & cleaned_data$x <= max_age75, ]

# Integrate
area_subset75 <- trapz(subset_data75$x, subset_data75$y)

# Print result
print(area_subset75)
```

0-78

```{r}
# Define age range for integration
min_age <- 0
max_age78 <- 78

# Subset cleaned_data to just those ages
subset_data78 <- cleaned_data[cleaned_data$x >= min_age & cleaned_data$x <= max_age78, ]

# Integrate
area_subset78 <- trapz(subset_data78$x, subset_data78$y)

# Print result
print(area_subset78)
```

0-90

```{r}
# Define age range for integration
min_age <- 0
max_age90 <-90

# Subset cleaned_data to just those ages
subset_data90 <- cleaned_data[cleaned_data$x >= min_age & cleaned_data$x <= max_age90, ]

# Integrate
area_subset90 <- trapz(subset_data90$x, subset_data90$y)

# Print result
print(area_subset90)
```

0-95.5

```{r}
# Define age range for integration
min_age <- 0
max_age95.5 <-95.5

# Subset cleaned_data to just those ages
subset_data95.5 <- cleaned_data[cleaned_data$x >= min_age & cleaned_data$x <= max_age95.5, ]

# Integrate
area_subset95.5 <- trapz(subset_data95.5$x, subset_data95.5$y)

# Print result
print(area_subset95.5)
```

0-100

```{r}
# Define age range for integration
min_age <- 0
max_age100 <- 100

# Subset cleaned_data to just those ages
subset_data100 <- cleaned_data[cleaned_data$x >= min_age & cleaned_data$x <= max_age100, ]

# Integrate
area_subset100 <- trapz(subset_data100$x, subset_data100$y)

# Print result
print(area_subset100)
```

0-136

```{r}
# Define age range for integration
min_age <- 0
max_age136 <- 136

# Subset cleaned_data to just those ages
subset_data136 <- cleaned_data[cleaned_data$x >= min_age & cleaned_data$x <= max_age136, ]

# Integrate
area_subset136 <- trapz(subset_data136$x, subset_data136$y)

# Print result
print(area_subset136)
```

0-150

```{r}
# Define age range for integration
min_age <- 0
max_age150 <- 150

# Subset cleaned_data to just those ages
subset_data150 <- cleaned_data[cleaned_data$x >= min_age & cleaned_data$x <= max_age150, ]

# Integrate
area_subset150 <- trapz(subset_data150$x, subset_data150$y)

# Print result
print(area_subset150)
```

0-171

```{r}
# Define age range for integration
min_age <- 0
max_age171 <- 171

# Subset cleaned_data to just those ages
subset_data171 <- cleaned_data[cleaned_data$x >= min_age & cleaned_data$x <= max_age171, ]

# Integrate
area_subset171 <- trapz(subset_data171$x, subset_data171$y)

# Print result
print(area_subset171)
```

0-190

```{r}
# Define age range for integration
min_age <- 0
max_age190 <- 190

# Subset cleaned_data to just those ages
subset_data190 <- cleaned_data[cleaned_data$x >= min_age & cleaned_data$x <= max_age190, ]

# Integrate
area_subset190 <- trapz(subset_data190$x, subset_data190$y)

# Print result
print(area_subset190)
```

0-200

```{r}
# Define age range for integration
min_age <- 0
max_age200 <- 200

# Subset cleaned_data to just those ages
subset_data200 <- cleaned_data[cleaned_data$x >= min_age & cleaned_data$x <= max_age200, ]

# Integrate
area_subset200 <- trapz(subset_data200$x, subset_data200$y)

# Print result
print(area_subset200)
```

0-213

```{r}
# Define age range for integration
min_age <- 0
max_age213 <- 213

# Subset cleaned_data to just those ages
subset_data213 <- cleaned_data[cleaned_data$x >= min_age & cleaned_data$x <= max_age213, ]

# Integrate
area_subset213 <- trapz(subset_data213$x, subset_data213$y)

# Print result
print(area_subset213)
```

0-230

```{r}
# Define age range for integration
min_age <- 0
max_age230 <- 230

# Subset cleaned_data to just those ages
subset_data230 <- cleaned_data[cleaned_data$x >= min_age & cleaned_data$x <= max_age230, ]

# Integrate
area_subset230 <- trapz(subset_data230$x, subset_data230$y)

# Print result
print(area_subset230)
```

### Carbon Stock over time (with Flux Data)

```{r}
#upload new dataset
dataset1a <- read_excel("dataset1a.xlsx")
#Create subsets
data_A1 <- subset(dataset1a, AgeAdapted2 >= -32 & AgeAdapted2 <= -0.5)
data_B1 <- subset(dataset1a, AgeAdapted2 > -0.5 & AgeAdapted2 <= -0.01)
data_C1 <- subset(dataset1a, AgeAdapted2 >= 0 & AgeAdapted2 <= 100)

data_C1$Type <- droplevels(data_C1$Type)

plotc <- ggplot() +
  # Smooth section before drop
  geom_smooth(data = data_A1, aes(x = AgeAdapted2, y = AvIntCarbonStock), method = "lm", fill = "grey", color = "black") +
  #Drop
  geom_smooth(data = data_B1, aes(x = AgeAdapted2, y = AvIntCarbonStock), method = "lm", fill = "grey", color = "black") +
  # Smooth section after drop
  geom_smooth(data = data_C1, aes(x = AgeAdapted2, y = AvIntCarbonStock), method = NULL, fill = "grey", color = "black") +
  
  geom_point(data = data_C1, aes(x = AgeAdapted2, y = AvIntCarbonStock, color = Type), shape = 16, size = 3)+
  labs(x = "Age", y = "Carbon Stock (Mg C/ha)", color = "Type")+
  scale_color_manual(values = c("forestgreen", "olivedrab3"), drop = TRUE)+
  scale_x_continuous(
    limits = c(-32, 105),
    breaks = c(0, 25, 50, 75, 100),
    labels = c("clearcut", "25", "50", "75", "100"),
    expand = c(0, 0)) +
  geom_vline(xintercept = 0, color = "black") +
     theme_classic() +
   theme(axis.title = element_text(size = 16), # Incease axis title font size
    axis.text = element_text(size = 15),  # Increase axis text font size
    legend.title = element_text(size = 16), # Increase legend title font size
    legend.text = element_text(size = 15))# Increase legend text font size
print(plotc)

ggsave("Carbon Stock over Time.svg", plot = plotc, width = 9, height = 5)

shell.exec("Carbon Stock over Time.svg")


```

#### find y-min

```{r}
# Fit a loess model manually
loess_fit <- loess(AvIntCarbonStock ~ AgeAdapted2, data = data_C1)

# Create a new data frame of predictions from the model
age_seq <- seq(min(data_C1$AgeAdapted2), max(data_C1$AgeAdapted2), length.out = 1000)
predicted <- predict(loess_fit, newdata = data.frame(AgeAdapted2 = age_seq))

# Find the minimum value and its corresponding age
min_index <- which.min(predicted)
min_age <- age_seq[min_index]
min_value <- predicted[min_index]

# Output the result
cat("Minimum Carbon Stock:", round(min_value, 2), "Mg C/ha\n")
cat("At Age:", round(min_age, 2), "\n")

```

### 2025-2045

```{r}
#upload new dataset
dataset1a <- read_excel("dataset1a.xlsx")
dataset8 <- read_excel("dataset8.xlsx")
#Create subsets
data_G <- subset(dataset1a, AgeAdapted2 >= -10 & AgeAdapted2 <= -0.5)
data_B1 <- subset(dataset8, AgeAdapted2 > -0.5 & AgeAdapted2 <= -0.01)
data_H <- subset(dataset1a, AgeAdapted2 >= 0 & AgeAdapted2 <= 24)

plotd <- ggplot() +
  # Smooth section before drop
  geom_smooth(data = data_G, aes(x = AgeAdapted2, y = AvIntCarbonStock), method = "lm", fill = "grey", color = "black") +
  #Drop
  geom_smooth(data = data_B1, aes(x = AgeAdapted2, y = AvIntCarbonStock), method = "lm", fill = "grey", color = "black") +
  # Smooth section after drop
  geom_smooth(data = data_H, aes(x = AgeAdapted2, y = AvIntCarbonStock), method = "lm", fill = "grey", color = "black") +
  
  geom_point(data = data_H, aes(x = AgeAdapted2, y = AvIntCarbonStock, color = Type), shape = 16, size = 3)+
  labs(x = "Year", y = "Carbon Stock (Mg C/ha)", color = "Type")+
  scale_color_manual(values = c("forestgreen", "olivedrab3"))+
  scale_x_continuous(
    limits = c(-10, 30),
    breaks = c(0, 10, 20),
    labels = c("2025 
(clearcut)", "2035", "2045"),
    expand = c(0, 0)) +
  scale_y_continuous(
    limits = c(0, 180),
    breaks = c(50, 100, 150),
    expand = c(0, 0)) +
  geom_vline(xintercept = 0, color = "black") +
     theme_classic() +
   theme(axis.title = element_text(size = 16), # Increase axis title font size
    axis.text = element_text(size = 15),  # Increase axis text font size
    legend.title = element_text(size = 16), # Increase legend title font size
    legend.text = element_text(size = 15))# Increase legend text font size
print(plotd)
 
ggsave("Carbon Stock over Time 2025-2045.svg", plot = plotd, width = 9, height = 5)

shell.exec("Carbon Stock over Time 2025-2045.svg")


```

#### significance

```{r}
#Does Age have an influence on Stock?

modela <- lm(AvIntCarbonStock ~ AgeAdapted2, data = data_H)
summary(modela)
```

### CO2 Emissions

```{r}
dataset7 <- read_excel("dataset7.xlsx")

plote <- ggplot() +
  geom_line(data = dataset7, aes(x = Year, y = tuttighgperyearpermio
), color = "darkred") +
  geom_ribbon(data = dataset7,
              aes(x = Year, ymin = 6, ymax = tuttighgperyearpermio
),
              fill = "mistyrose", alpha = 0.5) +
   theme_classic() +
  labs(x = "Year", y = "CO2 Emissions (Mio Mg)")+
  scale_x_continuous(
  limits = c(2025, 2045.5),  # Add slight buffer
  breaks = seq(2025, 2045, by = 5),
  expand = c(0, 0)
)+
   scale_y_continuous(
  limits = c(0, 12.5),  # Add slight buffer
  breaks = c(6, 8, 10, 12),
  expand = c(0, 0)
)+
  annotate("text", x=2037, y=7.7, label= "Tot = 196.534.100 Mg CO2", size=5)+
  scale_y_continuous(
  limits = c(6, 12),  # Add slight buffer
  breaks = seq(6, 12, by = 2))+
   theme(axis.title = element_text(size = 16), # Increase axis title font size
    axis.text = element_text(size = 15),  # Increase axis text font size
    legend.title = element_text(size = 16), # Increase legend title font size
    legend.text = element_text(size = 15))# Increase legend text font size
print(plote)

ggsave("CO2 Emissions over Time.svg", plot = plote, width = 7.5, height = 5)

shell.exec("CO2 Emissions over Time.svg")


```
